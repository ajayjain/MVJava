// Ajay Jain
// January 14, 2013
// Mars.java
// This class is a mini RPG terminal game set on MARS.

import java.io.*;
import java.util.*;

public class Mars {
	private byte n = 25			// Size of board
			   , maxmoves = 30	// Max moves allowed
			   , moves = 0		// Number of moves made
			   , icecount = 0	// Number of ice blocks collected
			   , hemcount = 0;	// Number of hematite rocks collected
	private boolean foundalien = false;				// Tells whether the user found the alien
	private char[][] planet = new char[n][n];		// 2D char array containing locations of rocks, ice and the aliens
	private byte[] rover = {n, n};					// Location of rover, in format (row, column)
	private Scanner kb = new Scanner(System.in);	// Scanner to read from stdin
	
	public Mars() {}
	public Mars(byte n) {this.n = n;}	// Set gameboard size
	
	public static void main(String[] args) {
		Mars game = new Mars();
		game.Run();
	}
	
	// Entry point for class, running the game
	public void Run() {
		FileInput();
		UserInput();
		while (moves <= maxmoves) {
			Move();
			CollectObject();
			PrintPlanet();
			moves++;
		}
		GameOver();
	}
	
	// Tasks to do at end of game
	private void GameOver() {
		System.out.println("\n\n!GAME OVER\nEnter");
		System.out.println("Leader Board");
	}
	
	// Ask user to input direction, then move the rover
	private void Move() {
		if (moves != 0) {
			char dir = ' ';
			while (dir != 'a' && dir != 's' && dir != 'd' && dir != 'w') {
				System.out.print("'a' is left, 'd' is right, 'w' is up, and 's' is down\nEnter a letter choice to move -> ");
				dir = kb.next().charAt(0);
				byte rnew = rover[0],
					cnew = rover[1];
				switch (dir) {
					case 'a':
						cnew--;
						break;
					case 's':
						rnew++;
						break;
					case 'd':
						cnew++;
						break;
					case 'w':
						rnew--;
						break;
				}
				if (rnew >= n || cnew >= n || rnew < 0 || cnew < 0) {
					// Tried to move off board
					System.out.println("\nOops - Your rover almost drove off Mars! Safety first!\n");
					dir = ' ';
				} else {
					rover[0] = rnew;
					rover[1] = cnew;
				}
			}
			System.out.println("\n_____________________________________________________________________________");
		}
	}
	
	private void CollectObject() {
		byte r = rover[0], c = rover[1];
		// Collect object rover is on top of
		switch (planet[r][c]) {
			case ('I'):
				icecount++;
				break;
			case('H'):
				hemcount++;
				break;
			case('@'):
				foundalien = true;
				break;
		}
		planet[r][c] = ' ';
	}
	
	private void PrintPlanet() {
		// Print stats
		System.out.printf("STATUS REPORT:  ROW:%d  COLUMN:%d %25d OF %d STEPS TAKEN\n", rover[0], rover[1], moves, maxmoves);
		System.out.printf("COLLECTED:  %d ICE SAMPLES,\t%d HEMATITE SAMPLES %8d ALIEN ENCOUNTERS", icecount, hemcount, foundalien ? 1 : 0);
		
		System.out.println("\n\n 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4"); // Print column labels
		
		for (int r = 0; r < n; r++) {
			// Print row labels
			System.out.print(r%10);
			// Print row
			for (int c = 0; c < n; c++) {
				if ((Math.abs(r-rover[0])+Math.abs(c-rover[1])) <= 3)
					if (rover[0] == r && rover[1] == c)
						if (foundalien)
							System.out.print("@ ");
						else
							System.out.print("R ");
					else if (planet[r][c] == ' ')
						System.out.print("- ");
					else
						System.out.print(planet[r][c]+" ");
				else
					System.out.print("  ");
			}
			System.out.println();
		}
	}
	
	// Read location input at beginning of program
	private void UserInput() {
		Random rand = new Random();
		
		while (n - 1 < rover[0] || rover[0] < -1) {
			System.out.print("Enter a grid row coordinate (0 - "+(n-1)+", -1 for random choice)\t-> ");
			rover[0] = kb.nextByte();
			if (rover[0] == -1) rover[0] = (byte) rand.nextInt(n);
		}
		
		while (n - 1 < rover[1] || rover[1] < -1) {
			System.out.print("Enter a grid column coordinate (0 - "+(n-1)+", -1 for random choice)\t-> ");
			rover[1] = kb.nextByte();
			if (rover[1] == -1) rover[1] = (byte) rand.nextInt(n);
		}
	}
	
	// Read location of rocks from rocks.txt
	private void FileInput() {
		for (int r = 0; r < n; r++)
			Arrays.fill(planet[r], ' ');
		try {
			Scanner f = new Scanner(new File("rocks.txt"));
			int numice = f.nextInt();
			for (int i = 0; i < numice; i++)
				planet[f.nextInt()][f.nextInt()] = 'I';
				
			int numhematite = f.nextInt();
			for (int i = 0; i < numhematite; i++)
				planet[f.nextInt()][f.nextInt()] = 'H';
			
			Random rand = new Random();
			planet[rand.nextInt(n)][rand.nextInt(n)] = '@';
		} catch (FileNotFoundException e) {
			System.err.println("ERROR: file rocks.txt not found. Quiting program now.");
			System.exit(1);
		}
	}
}
